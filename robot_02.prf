(robot_02
 (move_towards_target_TCC1 0
  (move_towards_target_TCC1-1 nil 3615480983 ("" (tcc))
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (target const-decl "pos" robot_02 nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (d const-decl "real" robot_01 nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (zero_square 0
  (zero_square-1 nil 3615486131
   ("" (grind)
    (("" (lemma "zero_times3")
      (("" (inst?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((zero_times3 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (square_ge_zero 0
  (square_ge_zero-1 nil 3615486408 ("" (grind) nil nil) nil shostak))
 (pos_sum_zero 0
  (pos_sum_zero-1 nil 3615486657
   ("" (skosimp*)
    (("" (split)
      (("1" (case "x!1 > 0")
        (("1" (lemma "both_sides_plus_lt1")
          (("1" (inst -1 "0" "x!1" "y!1") (("1" (assert) nil nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil)
       ("2" (lemma "both_sides_plus_lt2")
        (("2" (case "y!1 > 0")
          (("1" (inst -2 "0" "y!1" "x!1") (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_plus_lt1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_plus_lt2 formula-decl nil real_props nil))
   shostak))
 (sum_of_squares_zero 0
  (sum_of_squares_zero-1 nil 3615486452
   ("" (skosimp*)
    (("" (lemma "zero_square")
      (("" (inst-cp -1 "x!1")
        (("" (inst -1 "y!1")
          (("" (lemma "square_ge_zero")
            (("" (inst-cp -1 "x!1")
              (("" (inst -1 "y!1")
                (("" (lemma "pos_sum_zero")
                  (("" (inst -1 "x!1 * x!1" "y!1 * y!1")
                    (("" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_square formula-decl nil robot_02 nil)
    (pos_sum_zero formula-decl nil robot_02 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (square_ge_zero formula-decl nil robot_02 nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (mtt_0_is_start 0
  (mtt_0_is_start-1 nil 3615484929
   ("" (skosimp* :preds? t)
    (("" (expand "move_towards_target")
      (("" (lift-if)
        (("" (grind)
          (("1" (lemma "sqrt_eq_0")
            (("1"
              (inst -1
               "x(start!1) * x(start!1) + y(start!1) * y(start!1)")
              (("1" (lemma "div_eq_zero")
                (("1" (inst? -1)
                  (("1" (flatten -1)
                    (("1" (rewrite-with-fnum -1)
                      (("1" (delete -1)
                        (("1" (delete -2 -3 -4)
                          (("1" (grind)
                            (("1" (lemma "sum_of_squares_zero")
                              (("1"
                                (inst?)
                                (("1"
                                  (grind)
                                  (("1"
                                    (detuple-boundvars)
                                    (("1"
                                      (apply-extensionality 1)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "sqrt_eq_0")
            (("2"
              (inst -1
               "x(start!1) * x(start!1) + y(start!1) * y(start!1)")
              (("2"
                (case "sqrt(x(start!1) * x(start!1) + y(start!1) * y(start!1)) / v!1 = 0")
                (("1" (hide -5)
                  (("1" (hide -3 -4)
                    (("1" (lemma "div_eq_zero")
                      (("1" (inst?)
                        (("1" (grind)
                          (("1" (lemma "sum_of_squares_zero")
                            (("1" (inst?)
                              (("1"
                                (grind)
                                (("1"
                                  (apply-extensionality 1)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("3" (apply-extensionality 3) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((move_towards_target const-decl "pos" robot_02 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   shostak))
 (mtt_robots_reach_target 0
  (mtt_robots_reach_target-2 nil 3615484844
   ("" (skosimp*)
    (("" (expand "reaches")
      (("" (inst 1 "d(start(r!1), target)/v!1 + 1")
        (("" (expand "pos")
          (("" (expand "move_towards_target")
            (("" (skosimp*)
              (("" (rewrite-with-fnum -1)
                (("" (beta)
                  (("" (assert)
                    (("" (use "dpp") (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reaches const-decl "bool" robot_01 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (pos const-decl "pos" robot_01 nil)
    (dpp formula-decl nil robot_01 nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (move_towards_target const-decl "pos" robot_02 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (target const-decl "pos" robot_02 nil)
    (robot type-eq-decl nil robot_01 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (d const-decl "real" robot_01 nil)
    (pos type-eq-decl nil robot_01 nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (mtt_robots_reach_target-1 nil 3615481176
   ("" (skosimp*)
    (("" (expand "reaches")
      (("" (inst 1 "d(init(r!1), target)/v!1 + 1")
        (("" (expand "pos")
          (("" (expand "move_towards_target")
            (("" (skosimp*)
              (("" (rewrite-with-fnum -1)
                (("" (beta)
                  (("" (assert)
                    (("" (use "dpp") (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reaches const-decl "bool" robot_01 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (pos const-decl "pos" robot_01 nil)
    (dpp formula-decl nil robot_01 nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (move_towards_target const-decl "pos" robot_02 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (target const-decl "pos" robot_02 nil)
    (robot type-eq-decl nil robot_01 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d const-decl "real" robot_01 nil)
    (pos type-eq-decl nil robot_01 nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (make_robot_TCC1 0
  (make_robot_TCC1-1 nil 3615484236
   ("" (skosimp*)
    (("" (expand "move_towards_target")
      (("" (lift-if) (("" (assert) (("" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   ((move_towards_target const-decl "pos" robot_02 nil)) shostak))
 (r1_is_mtt 0
  (r1_is_mtt-1 nil 3615616840
   ("" (expand "mtt_robot?")
    (("" (expand "r1")
      (("" (expand "make_robot")
        (("" (inst?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((r1 const-decl "robot" robot_02 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (make_robot const-decl "robot" robot_02 nil)
    (mtt_robot? const-decl "bool" robot_02 nil))
   shostak))
 (r2_is_mtt 0
  (r2_is_mtt-1 nil 3615616923 ("" (grind) nil nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (mtt_robot? const-decl "bool" robot_02 nil)
    (r2 const-decl "robot" robot_02 nil)
    (make_robot const-decl "robot" robot_02 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (move_TCC1 0
  (move_TCC1-1 nil 3615493511 ("" (subtype-tcc) nil nil)
   ((move_towards_target const-decl "pos" robot_02 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (all_robots_are_mtt 0
  (all_robots_are_mtt-1 nil 3615483020
   ("" (skosimp*)
    (("" (case "r!1 = r1" "r!1 = r2")
      (("1" (grind) nil nil)
       ("2" (lemma "r1_is_mtt") (("2" (grind) nil nil)) nil)
       ("3" (lemma "r2_is_mtt") (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((r1 const-decl "robot" robot_02 nil)
    (robot type-eq-decl nil robot_01 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pos type-eq-decl nil robot_01 nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (r2 const-decl "robot" robot_02 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mtt_robot? const-decl "bool" robot_02 nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (robots const-decl "set[robot]" robot_02 nil)
    (make_robot const-decl "robot" robot_02 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (r1_is_mtt formula-decl nil robot_02 nil)
    (r2_is_mtt formula-decl nil robot_02 nil))
   shostak))
 (all_robots_reach_target 0
  (all_robots_reach_target-1 nil 3615482897
   ("" (skosimp*)
    (("" (lemma "all_robots_are_mtt")
      (("" (inst?)
        (("" (rewrite-with-fnum -2)
          (("" (expand "mtt_robot?")
            (("" (lemma "mtt_robots_reach_target")
              (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_robots_are_mtt formula-decl nil robot_02 nil)
    (mtt_robots_reach_target formula-decl nil robot_02 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (move_towards_target const-decl "pos" robot_02 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (reaches const-decl "bool" robot_01 nil)
    (d const-decl "real" robot_01 nil)
    (pos const-decl "pos" robot_01 nil)
    (target const-decl "pos" robot_02 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mtt_robot? const-decl "bool" robot_02 nil)
    (robot type-eq-decl nil robot_01 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pos type-eq-decl nil robot_01 nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

