# Correctness by Construction

## Specializes

[[VerificationAndValidation]]

## Classification

[[!taglink ensemble]], [[!taglink validation]], [[!taglink edlc/validation]]


## Aliases

Correct by Construction

## Intent

Build systems in such a way, that the construction process is
guaranteed to be correct, and include a proof of the correctness in
the program itself.

## Context

For many systems high reliability and freedom from errors is
important.  Many [[VerificationAndValidation]] techniques can be used
at design time to improve the confidence that the system will perform
as expected, and runtime mechanisms to monitor the system's
performance and take measures at run time if problems are detected.
However, verification and validation techniques are often
time-consuming and require a lot of manual input.

In some instances it is possible to build the system in such a manner
that the construction process itself guarantees the correctness of the
system.  For example, when declaratively assembling a service from
simpler services using logical reasoning, the correctness of the
resulting service is ensured by the construction process itself and
relies only on the correctness of the specifications of the
sub-servics.

## Description/Behavior

The main idea behind Correctness by Construction is to ensure for
every step of the development process.  It relies on a rigorous
definition of the requirements, a precise specification of the
system's behavior, and traceability between the stages of the
development process. Often static verification techniques are used
throughout all stages of the development process, and programming
languages with strong type systems (e.g., dependently typed languages)
are used.

Which properties are "correct by construction" strongly depends on the
details of the static checks and construction principles that are
used.  Techniques used to ensure correctness by construction are, for
example

 -  Checking of coding standards; eliminating undefined features of
    the implementation language
	
 -  Extended type checking
 
 -  Design by Contract (e.g., SPARK for ADA)
 
 -  Data-flow analysis, theorem proving and abstract interpretation
    (e.g., JML and ESC2 for Java)
	

## Consequences

Correctness by Construction (CbC) can ensure that the implementation
satisfies the requirements and that the final system satisfies those
properties which are in the scope of the approach CbC used.  Therefore
it requires a detailed specification that changes little during the
development of the system.

[[!tag pattern]]
