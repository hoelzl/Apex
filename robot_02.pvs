robot_02: THEORY
 BEGIN

  IMPORTING robot_01[real, 0, <=]

  start, p, p1, p2: VAR pos

  target: pos = (# x := 0.0, y := 0.0 #)

  v: VAR posreal

  t, t1, t2: VAR real

  move_towards_target(start, v)(t): pos =
      IF t = 0 THEN start
      ELSE LET t1 = d(start, target) / v IN
             IF t1 = 0 OR t1 <= t THEN target
             ELSE LET percent = t / t1 IN
                    (# x := x(start) + percent * (x(target) - x(start)),
                       y := y(start) + percent * (y(target) - y(start)) #)
             ENDIF
      ENDIF

  x, y: VAR real

  zero_square: LEMMA x * x = 0 => x = 0

  square_ge_zero: LEMMA x * x >= 0

  pos_sum_zero: LEMMA x >= 0 AND y >= 0 AND x + y = 0 => (x = 0 AND y = 0)

  sum_of_squares_zero: LEMMA x * x + y * y = 0 => (x = 0 AND y = 0)

  mtt_0_is_start: LEMMA move_towards_target(start, v)(0) = start

  r, rr: VAR robot

  mtt_robots_reach_target: PROPOSITION
    (EXISTS v: strategy(r) = move_towards_target(start(r), v)) =>
     reaches(r, target)

  mtt_robot?(r): bool =
      EXISTS v:
        strategy(r) = move_towards_target(start(r), v) AND
         (FORALL t: velocity(r)(t) = v)

  make_robot(x, y: real, v: posreal): robot =
      LET start = (# x := x, y := y #) IN
        (# start := start,
           strategy := move_towards_target(start, v),
           velocity := LAMBDA (t): v #)

  r1: robot = make_robot(1.0, 1.0, 0.1)
  r2: robot = make_robot(-10.0, 5.0, 0.5)

  r1_is_mtt: LEMMA mtt_robot?(r1)
  r2_is_mtt: LEMMA mtt_robot?(r2)

  move(r, t): robot =
      LET new_start = strategy(r)(t) IN
        r WITH [start := new_start,
                strategy := move_towards_target(new_start, velocity(r)(0))]

  robots: set[robot] = union(singleton(r1), singleton(r2))

  all_robots_are_mtt: LEMMA member(r, robots) => mtt_robot?(r)

  all_robots_reach_target: PROPOSITION
    member(r, robots) => reaches(r, target)

  rs: VAR set[robot]

  move(rs, t): set[robot] =
    {r | exists rr: member(rr, robots) AND r = move(rr, t)}
 END robot_02
